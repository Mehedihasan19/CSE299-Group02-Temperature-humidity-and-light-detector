#include <SoftwareSerial.h>
#include "DHT.h"
#include <Wire.h>
#include <LiquidCrystal.h>


LiquidCrystal lcd(2,3,4,5,6,7);

int value_temp;
int value_light;
int value_humid;

#define DHTPIN 9 
#define DHTTYPE DHT11 
DHT dht(DHTPIN, DHTTYPE);

bool metric = false;
#define DEBUG FALSE //comment out to remove debug msgs

//*-- Hardware Serial
#define _baudrate 115200

//*-- Software Serial
//
#define _rxpin      0                   //we used hardware serial port
#define _txpin      1
SoftwareSerial debug( _rxpin, _txpin ); // RX, TX

//*-- IoT Information
#define SSID "testw"
#define PASS "876543210"
#define IP "184.106.153.149" 







String GET = "GET /update?key=E3DWHN5JTG4PVONL";

void setup() {

   lcd.begin(16,2); 
   Serial.begin( _baudrate );
  debug.begin( _baudrate );

 lcd.setCursor(0,0);
 lcd.print("Weather Station ");
 dht.begin();


  sendDebug("AT");
  delay(5000);
  if(Serial.find("OK"))
  {
    debug.println("RECEIVED: OK\nData ready to sent!");
   while(! connectWiFi()){
        Serial.println("Could not find Wifi!");
    delay(1000);
   }
  }


 lcd.setCursor(0,0);
 lcd.print("  IOT Project   ");
  

}

void loop() {




int Light=analogRead(0);


 int outlight = map(Light, 0, 1023, 0, 100);


  

  
  value_temp = (dht.readTemperature());
  value_light = (outlight);
  value_humid = (dht.readHumidity());



 lcd.setCursor(0,1);
 lcd.print("T:");
 lcd.print(dht.readTemperature(),0);
 lcd.print(",H:");
 lcd.print(dht.readHumidity(),0);
  lcd.print("%,L:");
 lcd.print(outlight);
 lcd.print("%");


  
  String temp =String(value_temp);// turn integer to string
  String light= String(value_light);// turn integer to string
  String humid=String(value_humid);// turn integer to string



  
  updateTS(temp,light, humid);
  delay(3000); //
}
//----- update the  Thingspeak string with 3 values
void updateTS( String T, String L , String H )
{
  // ESP8266 Client
  String cmd = "AT+CIPSTART=\"TCP\",\"";// Setup TCP connection
  cmd += IP;
  cmd += "\",80";
  sendDebug(cmd);
  delay(2000);
  if( Serial.find( "Error" ) )
  {
    debug.print( "RECEIVED: Error\nExit1" );
    return;
  }

  cmd = GET + "&field1=" + T +"&field2="+ L + "&field3=" + H +"\r\n";
  Serial.print( "AT+CIPSEND=" );
  Serial.println( cmd.length() );
  if(Serial.find( ">" ) )
  {
    debug.print(">");
    debug.print(cmd);
    Serial.print(cmd);
  }
  else
  {
    sendDebug( "AT+CIPCLOSE" );//close TCP connection
  }
  if( Serial.find("OK") )
  {
    debug.println( "RECEIVED: OK" );
  }
  else
  {
    debug.println( "RECEIVED: Error\nExit2" );
  }
}

void sendDebug(String cmd)
{
  debug.print("SEND: ");
  debug.println(cmd);
  Serial.println(cmd);
}

boolean connectWiFi()
{
  Serial.println("AT+CWMODE=1");//WiFi STA mode - if '3' it is both client and AP
  delay(2000);
  //Connect to Router with AT+CWJAP="SSID","Password";
  // Check if connected with AT+CWJAP?
  String cmd="AT+CWJAP=\""; // Join accespoint
  cmd+=SSID;
  cmd+="\",\"";
  cmd+=PASS;
  cmd+="\"";
  sendDebug(cmd);
  delay(5000);
  if(Serial.find("OK"))
  {
    debug.println("RECEIVED: OK");
    return true;
  }
  else
  {
    debug.println("RECEIVED: Error");
    return false;
  }

  cmd = "AT+CIPMUX=0";// Set Single connection
  sendDebug( cmd );
  if( Serial.find( "Error") )
  {
    debug.print( "RECEIVED: Error" );
    return false;
  }
}

double Light (int RawADC0){
double Vout=RawADC0*0.0048828125;
int lux=(2500/Vout-500)/10;
return lux;
}